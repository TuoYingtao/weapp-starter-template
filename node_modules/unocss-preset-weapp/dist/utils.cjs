'use strict';

const colors = require('./shared/unocss-preset-weapp.d6f74a4e.cjs');
const core = require('@unocss/core');
const utils = require('unplugin-transform-class/utils');
require('@unocss/rule-utils');

function variantMatcher(name, handler, transformRules = utils.defaultRules) {
  let re;
  return {
    name,
    match(input, ctx) {
      if (!re)
        re = new RegExp(`^${core.escapeRegExp(name)}(?:${ctx.generator.config.separators.join("|")})`);
      input = utils.cacheRestoreSelector(input, transformRules);
      const match = input.match(re);
      if (match) {
        return {
          matcher: input.slice(match[0].length),
          handle: (input2, next) => next({
            ...input2,
            ...handler(input2)
          })
        };
      }
    },
    autocomplete: `${name}:`
  };
}
function variantParentMatcher(name, parent, transformRules = utils.defaultRules) {
  let re;
  return {
    name,
    match(input, ctx) {
      if (!re)
        re = new RegExp(`^${core.escapeRegExp(name)}(?:${ctx.generator.config.separators.join("|")})`);
      input = utils.cacheRestoreSelector(input, transformRules);
      const match = input.match(re);
      if (match) {
        return {
          matcher: input.slice(match[0].length),
          handle: (input2, next) => next({
            ...input2,
            parent: `${input2.parent ? `${input2.parent} $$ ` : ""}${parent}`
          })
        };
      }
    },
    autocomplete: `${name}:`
  };
}
function variantGetBracket(prefix, matcher, separators) {
  if (matcher.startsWith(`${prefix}[`)) {
    const [match, rest] = colors.getBracket(matcher.slice(prefix.length), "[", "]") ?? [];
    if (match && rest) {
      for (const separator of separators) {
        if (rest.startsWith(separator))
          return [match, rest.slice(separator.length), separator];
      }
      return [match, rest, ""];
    }
  }
}
function variantGetParameter(prefix, matcher, separators) {
  if (matcher.startsWith(prefix)) {
    const body = variantGetBracket(prefix, matcher, separators);
    if (body) {
      const [label = "", rest = body[1]] = variantGetParameter("/", body[1], separators) ?? [];
      return [body[0], rest, label];
    }
    for (const separator of separators.filter((x) => x !== "/")) {
      const pos = matcher.indexOf(separator, prefix.length);
      if (pos !== -1) {
        const labelPos = matcher.indexOf("/", prefix.length);
        const unlabelled = labelPos === -1 || pos <= labelPos;
        return [
          matcher.slice(prefix.length, unlabelled ? pos : labelPos),
          matcher.slice(pos + separator.length),
          unlabelled ? "" : matcher.slice(labelPos + 1, pos)
        ];
      }
    }
  }
}

exports.CONTROL_MINI_NO_NEGATIVE = colors.CONTROL_MINI_NO_NEGATIVE;
exports.colorOpacityToString = colors.colorOpacityToString;
exports.colorResolver = colors.colorResolver;
exports.colorToString = colors.colorToString;
exports.colorableShadows = colors.colorableShadows;
exports.cornerMap = colors.cornerMap;
exports.cssMathFnRE = colors.cssMathFnRE;
exports.directionMap = colors.directionMap;
exports.directionSize = colors.directionSize;
exports.getBracket = colors.getBracket;
exports.getComponent = colors.getComponent;
exports.getComponents = colors.getComponents;
exports.globalKeywords = colors.globalKeywords;
exports.h = colors.h;
exports.handler = colors.handler;
exports.hasParseableColor = colors.hasParseableColor;
exports.hex2rgba = colors.hex2rgba;
exports.insetMap = colors.insetMap;
exports.isCSSMathFn = colors.isCSSMathFn;
exports.isSize = colors.isSize;
exports.makeGlobalStaticRules = colors.makeGlobalStaticRules;
exports.parseColor = colors.parseColor;
exports.parseCssColor = colors.parseCssColor;
exports.positionMap = colors.positionMap;
exports.resolveBreakpoints = colors.resolveBreakpoints;
exports.resolveVerticalBreakpoints = colors.resolveVerticalBreakpoints;
exports.splitShorthand = colors.splitShorthand;
exports.valueHandlers = colors.valueHandlers;
exports.xyzMap = colors.xyzMap;
exports.variantGetBracket = variantGetBracket;
exports.variantGetParameter = variantGetParameter;
exports.variantMatcher = variantMatcher;
exports.variantParentMatcher = variantParentMatcher;
