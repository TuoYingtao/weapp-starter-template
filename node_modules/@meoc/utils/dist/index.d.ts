/**
 * 移除数组中的某个元素(改变原数组)
 * @param arr - 数组
 * @param el - 元素
 */
declare function removeAt<T>(arr: T[], el: T): void;
/**
 * 将值插入到指定索引之后(改变原数组)
 * @param arr - 数组
 * @param index - 索引
 * @param v - 值
 * @example
 * let otherArray = [2, 10];
 * insertAt(otherArray, 0, 4, 6, 8); // otherArray = [2, 4, 6, 8, 10]
 */
declare function insertAt<T>(arr: T[], index: number, ...v: T[]): T[];
/**
 * 返回数组中的最后一个元素
 * @param arr - 数组
 * @example
 * last([1, 2, 3]); // 3
 * last([]); // undefined
 * last(null); // undefined
 * last(undefined); // undefined
 */
declare function last<T>(arr: T[]): T | undefined;
/**
 * 返回数组中的最后 n 个元素
 * @param arr - 数组
 * @param n - 索引
 * @example lastN(['a', 'b', 'c', 'd'], 2); // ['c', 'd']
 */
declare const lastN: <T>(arr: T[], n: number) => T[];
/**
 * 布尔全等判断
 * @param arr - 数组
 * @param fn - 判断函数
 * @example all([4, 2, 3], x => x > 1) => true
 */
declare function all<T>(arr: T[], fn: (v: T) => boolean): boolean;
/**
 * 检查数组各项相等
 * @param arr - 数组
 * @example allEqual([4, 2, 3]) => false
 * @example allEqual([4, 4, 4]) => true
 */
declare function allEqual(arr: unknown[]): boolean;
/**
 * 生成一个指定长度的数组
 * @param length - 数组长度
 * @param value - 数组元素
 * @example createArray(3, 'x'); // ['x', 'x', 'x']
 */
declare function createArray<T>(length: number, value: T): unknown[];
/**
 * 打乱数组
 * @param arr - 数组
 * @example shuffleArray([1, 2, 3]); // [2, 3, 1]
 */
declare function shuffleArray<T>(arr: T[]): T[];
/**
 * 移除数组中的重复元素 (基础数据类型)
 * @param arr - 数组
 * @example removeDuplicates([1, 2, 3, 4, 2, 3]); // [1, 2, 3, 4]
 */
declare function removeDuplicates<T>(arr: T[]): T[];
/**
 * 根据条件移除数组中的元素 (对象)
 * @param arr - 数组
 * @param prop - 属性
 * @example removeByProp([{ id: 1 }, { id: 2 }, { id: 2 }], 'id') => [{ id: 1 }, { id: 2 }]
 */
declare function removeByProp<T>(arr: T[], prop: keyof T): any[];
/**
 * 多数组取交集
 * @param arr
 * @example intersection([1, 2, 3], [4, 3, 2], [2, 3, 4]); // [2, 3]
 */
declare function intersection<T>(...arr: T[][]): T[];
/**
 * 查找最大值索引
 * @param arr - 数组
 * @example indexOfMax([20, 10, 5, 30]); // 3
 */
declare function indexOfMax(arr: number[]): number;
/**
 * 查找最小值索引
 * @param arr - 数组
 * @example indexOfMin([20, 10, 5, 30]); // 2
 */
declare function indexOfMin(arr: number[]): number;
/**
 * 最接近的数值
 * @param arr - 数组
 * @param n - 数值
 * @example closest([1, 2, 3, 4], 5); // 4
 */
declare function closest(arr: number[], n: number): number;
/**
 * 矩阵交换行和列
 * @param matrix - 矩阵
 * @example transpose([[1, 2, 3], [4, 5, 6]]); // [[1, 4], [2, 5], [3, 6]]
 */
declare function transpose<T>(matrix: T[][]): T[][];
/**
 * 将数组按照 key 分组
 * @param arr 数组
 * @param key arr对象的key
 * @example
 * const arr = [
 *    { classId: '1', name: '张三', age: 16 },
 *    { classId: '1', name: '李四', age: 15 },
 *    { classId: '2', name: '王五', age: 16 },
 * ]
 * groupArrayByKey(arr, 'classId')
 *
 * // 结果
 * {
 *   1: [
 *       { classId: '1', name: '张三', age: 16 },
 *       { classId: '1', name: '李四', age: 15 }
 *   ],
 *  2: [
 *     { classId: '2', name: '王五', age: 16 }
 *  ]
 * }
 */
declare function groupArrayByKey<T = any>(arr: T[] | undefined, key: keyof T): any;

/**
 * JSON深度拷贝对象
 * @param  obj - 对象
 * @returns 拷贝的对象
 */
declare function clone<T = any>(obj: T): T;
/**
 * 清除对象中 undefined,null,[]空数组
 * @param  obj - 对象
 * @returns 清除后的对象
 */
declare function normalize(obj: any): any;
declare function hasOwn(val: object, key: string | number | symbol): boolean;
declare const objectToString: () => string;
/**
 * 对象类型
 * @param value - 对象
 */
declare function toTypeString(value: unknown): string;
/**
 * 比较一个值是否改变
 * @param value - 对象
 * @param oldValue - 对象
 *
 */
declare function hasChanged(value: any, oldValue: any): boolean;
/**
 * 获取对象的属性值
 * @param obj - 对象
 * @param path - 属性路径
 * @param defaultValue - 属性路径不存在，返回默认值
 * @example
 * const obj = { a: { b: { c: 1 } } }
 * getByPath(obj, 'a.b.c') // 1
 * getByPath(obj, 'a.b.d') // 'no value'
 * getByPath(obj, 'a.b.d', 2) // 2
 */
declare function getByPath(obj: any, path: string, defaultValue?: any): any;
/**
 * 忽略对象选中的属性
 * @param obj 来源对象
 * @param paths 要被忽略的属性数组
 * @example omit({ a: 1, b: 2, c: 3 }, ['a', 'b']) // { c: 3 }
 */
declare function omit<T extends object, K extends keyof T>(obj: T, paths: K[]): Pick<T, K>;
/**
 * 生成经 predicate 判断为假值的属性的对象
 * @param obj 来源对象
 * @param predicate 调用每一个属性的函数
 * @example const obj = { a: 1, b: 2, c: 3 }
 * omitBy(obj, value => value > 1) // { a: 1 }
 */
declare function omitBy<T>(obj: T, predicate: (item: T[Extract<keyof T, string>], key: keyof T) => boolean): { [K in keyof T]: T[K]; };
/**
 * 生成选中属性的对象
 * @param  obj 来源对象
 * @param  paths 要被选中的属性数组
 * @example const obj = { a: 1, b: 2, c: 3 }
 * pick(obj, ['a', 'b']) // { a: 1, b: 2 }
 */
declare function pick<T extends object, K extends keyof T>(obj: T, paths?: K[]): Pick<T, K>;
/**
 *  生成经 predicate 判断为真值的属性的对象
 * @param object 来源对象
 * @param predicate 调用每一个属性的函数
 * @example const obj = { a: 1, b: 2, c: 3 }
 * pickBy(obj, (value, key) => value > 1) // { b: 2, c: 3 }
 */
declare function pickBy<T>(obj: T, predicate: (item: T[Extract<keyof T, string>], key: keyof T) => boolean): { [K in keyof T]: T[K]; };

/**
 * Function
 */
type Fn<T = void> = () => T;
type AnyFn = (...args: any[]) => any;

/**
 * 睡眠
 * @param ms - 毫秒数
 * @param callback - 回调函数
 */
declare function sleep(ms: number, callback?: Fn<any>): Promise<void>;
/**
 * 动态加载JS文件
 * @param urls - JS文件地址
 * @param done - 加载完成回调
 * @example
 * loadJS(["test1.js", "test2.js"], () => {
 *    // 用户的回调逻辑
 * });
 */
declare function loadJs(urls: string[], done: Fn<any>): void;

/**
 * 驼峰化
 * @param str - 字符串
 * @example user-info => userInfo
 */
declare function camelize(str: string): string;
/**
 * 将字符串转换为 pascal
 * @param str - 字符串
 * @example
 * user-info => UserInfo
 * some_database_field_name => SomeDatabaseFieldName
 * Some label that needs to be pascalized => SomeLabelThatNeedsToBePascalized
 * some-mixed_string with spaces_underscores-and-hyphens => SomeMixedStringWithSpacesUnderscoresAndHyphens
 */
declare function toPascalCase(str: string): string;
/**
 * 将字符串转换为 camel
 * @param str
 * @example hello-world => helloWorld
 * @example hello_world => helloWorld
 * @example hello world => helloWorld
 */
declare function toCamelCase(str: string): string;
/**
 * 将字符串转换为 kebab
 * @param str
 * @example helloWorld => hello-world
 * @example hello_world => hello-world
 * @example hello world => hello-world
 */
declare function toKebabCase(str: string): string;
/**
 * 将字符串转换为 snake
 * @param str
 * @example helloWorld => hello_world
 * @example hello_world => hello_world
 * @example hello world => hello_world
 */
declare function toSnakeCase(str: string): string;
/**
 * 字符数组
 * @param s
 * @example hello => ['h', 'e', 'l', 'l', 'o']
 */
declare const toCharArray: (s: string) => string[];
/**
 * 首字母大写
 * @param str - 字符串
 * @example userInfo => UserInfo
 */
declare function capitalize(str: string): string;
/**
 * 大写字母 转为 小写-连接
 * @param str - 字符串
 * @example UserInfo => user-info
 */
declare function hyphenate(str: string): string;
/**
 * 替换所有相同字符串
 * @param text - 需要处理的字符串
 * @param repstr - 被替换的字符
 * @param newstr - 替换后的字符
 */
declare function replaceAll(text: string, repstr: string, newstr: string): string;
/**
 * @desc 去左右空格
 * @param value - 需要处理的字符串
 */
declare function trim(value: string): string;
/**
 * @desc 去所有空格
 * @param value - 需要处理的字符串
 */
declare function trimAll(value: string): string;
/**
 * 根据数字获取对应的汉字
 * @param num - 数字(0-10)
 */
declare function getHanByNumber(num: number): string;
/**
 * 根据数字获取星期几
 * @param num - 数字(0-7)
 */
declare function getDayByNumber(num: number): string;
/**
 * 插入字符串
 * @param str - 原字符串
 * @param start - 插入位置
 * @param insertStr - 插入字符串
 */
declare function insertStr(str: string, start: number, insertStr: string): string;
/**
 * 转义HTML字符
 * @param str - 字符串
 * @example '<a href="#">Me & you</a>' => '&lt;a href="#"&gt;Me &amp; you&lt;/a&gt;'
 */
declare function escapeHTML(str: string): string;
/**
 * 移除空格
 * @param str - 字符串
 * @example '  Hello  \nWorld  ' => 'Hello World'
 */
declare const removeWhitespace: (str: string) => string;

/**
 * 对比 version 的版本号
 * @param v1 - 1.2.3
 * @param v2 - 1.2.5
 * @returns -1: v1 < v2; 0: v1 = v2; 1: v1 > v2
 */
declare function compareVersion(v1: string, v2: string): number;

/**
 * HTTP 状态码
 */
declare const HTTP_STATUS: {
    /**
     * HTTP Status-Code 200: OK(正常).
     */
    OK: number;
    /**
     * HTTP Status-Code 201: Created(201：已创建).
     */
    CREATED: number;
    /**
     * HTTP Status-Code 202: Accepted(已接受).
     */
    ACCEPTED: number;
    /**
     * HTTP Status-Code 203: Non-Authoritative Information(非权威信息).
     */
    NOT_AUTHORITATIVE: number;
    /**
     * HTTP Status-Code 204: No Content(无内容).
     */
    NO_CONTENT: number;
    /**
     * HTTP Status-Code 205: Reset Content(重置内容).
     */
    RESET: number;
    /**
     * HTTP Status-Code 206: Partial Content(部分内容).
     */
    PARTIAL: number;
    /**
   * HTTP Status-Code 300: Multiple Choices(多项选择).
   */
    MULT_CHOICE: number;
    /**
   * HTTP Status-Code 301: Moved Permanently(永久移动).
   */
    MOVED_PERM: number;
    /**
   * HTTP Status-Code 302: Temporary Redirect(临时重定向).
   */
    MOVED_TEMP: number;
    /**
   * HTTP Status-Code 303: See Other(请参阅其他).
   */
    SEE_OTHER: number;
    /**
   * HTTP Status-Code 304: Not Modified(未修改).
   */
    NOT_MODIFIED: number;
    /**
   * HTTP Status-Code 305: Use Proxy(使用代理).
   */
    USE_PROXY: number;
    /**
   * HTTP Status-Code 400: Bad Request(错误请求).
   */
    BAD_REQUEST: number;
    /**
   * HTTP Status-Code 401: Unauthorized(未经授权).
   */
    UNAUTHORIZED: number;
    /**
   * HTTP Status-Code 402: Payment Required(需要付款).
   */
    PAYMENT_REQUIRED: number;
    /**
   * HTTP Status-Code 403: Forbidden(禁止访问).
   */
    FORBIDDEN: number;
    /**
   * HTTP Status-Code 404: Not Found(未找到).
   */
    NOT_FOUND: number;
    /**
   * HTTP Status-Code 405: Method Not Allowed(方法不允许).
   */
    BAD_METHOD: number;
    /**
   * HTTP Status-Code 406: Not Acceptable(不可接受).
   */
    NOT_ACCEPTABLE: number;
    /**
   * HTTP Status-Code 407: Proxy Authentication Required(需要代理身份验证).
   */
    PROXY_AUTH: number;
    /**
   * HTTP Status-Code 408: Request Time-Out(请求超时).
   */
    CLIENT_TIMEOUT: number;
    /**
   * HTTP Status-Code 409: Conflict(冲突).
   */
    CONFLICT: number;
    /**
   * HTTP Status-Code 410: Gone(消失).
   */
    GONE: number;
    /**
   * HTTP Status-Code 411: Length Required(需要长度).
   */
    LENGTH_REQUIRED: number;
    /**
   * HTTP Status-Code 412: Precondition Failed(前提条件失败).
   */
    PRECON_FAILED: number;
    /**
   * HTTP Status-Code 413: Request Entity Too Large(请求实体太大).
   */
    ENTITY_TOO_LARGE: number;
    /**
   * HTTP Status-Code 414: Request-URI Too Large(请求 URI 太大).
   */
    REQ_TOO_LONG: number;
    /**
   * HTTP Status-Code 415: Unsupported Media Type(不支持的媒体类型).
   */
    UNSUPPORTED_TYPE: number;
    /**
   * HTTP Status-Code 500: Internal Server Error(内部服务器错误).
   */
    INTERNAL_ERROR: number;
    /**
   * HTTP Status-Code 501: Not Implemented(未实现).
   */
    NOT_IMPLEMENTED: number;
    /**
   * HTTP Status-Code 502: Bad Gateway(网关错误).
   */
    BAD_GATEWAY: number;
    /**
   * HTTP Status-Code 503: Service Unavailable(服务不可用).
   */
    UNAVAILABLE: number;
    /**
   * HTTP Status-Code 504: Gateway Timeout(网关超时).
   */
    GATEWAY_TIMEOUT: number;
    /**
   * HTTP Status-Code 505: HTTP Version Not Supported(不支持 HTTP 版本).
   */
    VERSION: number;
};
/**
 * dayjs 时间格式
 */
declare enum DATE_FORMAT {
    /**
     * 分
     */
    TO_MINUTE = "YYYY-MM-DD HH:mm",
    /**
     * 小时
     */
    TO_HOUR = "YYYY-MM-DD HH",
    /**
     * 日
     */
    TO_DAY = "YYYY-MM-DD",
    /**
     * 月
     */
    TO_MONT = "YYYY-MM",
    /**
     * 年
     */
    TO_YEAR = "YYYY",
    /**
     * 秒
     */
    TO_SECOND = "YYYY-MM-DD HH:mm:ss"
}
/**
 * http contentType
 */
declare const HTTP_CONTENT_TYPE: {
    JSON: string;
    FORM_URLENCODED: string;
    FORM_DATA: string;
    TEXT: string;
    ZIP: string;
};
/**
 * http 请求方式
 */
declare const HTTP_REQUEST: {
    GET: string;
    POST: string;
    PUT: string;
    DELETE: string;
};
declare const TYPE_OF: {
    NUMBER: string;
    STRING: string;
    FUNCTION: string;
    SYMBOL: string;
    OBJECT_STR: string;
    BOOLEAN: string;
    NULL: string;
    UNDEFINED: string;
    OBJECT: string;
    ARRAY: string;
    DATE: string;
    REGEXP: string;
    SET: string;
    MAP: string;
    FILE: string;
};

type DateFormat = DATE_FORMAT | string;
type IDate = Date | string;
/**
 * 格式化日期
 * @param date - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD HH:mm
 * @example formatDate(null, 'YYYY-MM-DD') // 2023-04-04
 * @example formatDate(new Date(), 'YYYY-MM-DD HH:mm:ss') // 2023-04-04 10:00:00
 * @example formatDate('2023-04-04', 'YYYY-MM-DD HH:mm:ss') // 2023-04-04 00:00:00
 */
declare function formatDate(date?: IDate, format?: DateFormat): string;
/**
 * 获取当前时间
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getNow(format?: DateFormat): string;
/**
 * 获取月第一天
 * @param date - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getFirstDayOfMonth(date?: IDate, format?: DateFormat): string;
/**
 * 获取月最后一天
 * @param date - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getLastDayOfMonth(date?: IDate, format?: DateFormat): string;
/**
 * 获取整月
 * @param date - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getDaysOfMonth(date?: IDate, format?: DateFormat): string[];
/**
 * 获取上个月
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getDaysOfLastMonth(format?: DATE_FORMAT): string[];
/**
 * 获取月第一天 到 现在
 * @param format - 格式 默认为YYYY-MM-DD
 */
declare function getDaysToNowOfMonth(date?: IDate, format?: DATE_FORMAT): string[];
/**
 * 获取年第一天
 * @param date - 日期 默认为当年
 * @param format - 格式 默认为YYYY-MM-DD
 * @returns
 */
declare function getFirstDayOfYear(date?: IDate, format?: DATE_FORMAT): string;
/**
 * 本周
 */
declare function getDaysOfWeek(format?: DATE_FORMAT): string[];
/**
 * d2是否在d1之后
 * @param d1 - 日期1
 * @param d2 - 日期2 默认为当前时间
 */
declare function isAfter(d1: IDate, d2?: IDate): boolean;
/**
 * d2是否在d1之前
 * @param d1 - 日期1
 * @param d2 - 日期2 默认为当前时间
 */
declare function isBefore(d1: IDate, d2?: IDate): boolean;
/**
 * d3是否在d1与d2之间
 * @param d1 - 日期1
 * @param d2 - 日期2
 * @param d3 - 日期3 默认为当前时间
 * @returns
 */
declare function isBetween(d1: IDate, d2: IDate, d3?: IDate): boolean;
/**
 * 加几天
 * @param days - 天数 默认为1
 * @param d - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD
 * @returns
 */
declare function addDays(days?: number, d?: IDate, format?: DATE_FORMAT): IDate;
/**
 * 减几天
 * @param days - 天数 默认为1
 * @param d - 日期 默认为当天
 * @param format - 格式 默认为YYYY-MM-DD
 * @returns
 */
declare function subDays(days?: number, d?: IDate, format?: DATE_FORMAT): IDate;
/**
 * 转换成 Date
 */
declare function toDate(date: string | string[]): Date | Date[];

/**
 * 转义字符串以在正则表达式中使用
 * @param string - 要转义的字符串
 * @returns
 */
declare function escapeRegExp(string: string): string;

/**
 * 转为数字
 * @param val - 值
 * @returns
 */
declare function toNumber(val: any): any;

declare function isArray(obj: any): boolean;
declare const isMap: (val: unknown) => val is Map<any, any>;
declare const isSet: (val: unknown) => val is Set<any>;
declare const isString: (val: unknown) => val is string;
declare const isDate: (val: unknown) => val is Date;
declare const isFunction: (val: unknown) => boolean;
declare const isSymbol: (val: unknown) => val is symbol;
declare const isObject: (val: unknown) => val is Record<any, any>;
declare function isPromise<T = any>(val: unknown): val is Promise<T>;
declare const isNumber: (val: any) => val is number;
declare const isNull: (val: unknown) => val is null;
declare const isUndefined: (val: unknown) => val is undefined;
declare const isRegExp: (val: unknown) => val is RegExp;
declare const isFile: (val: unknown) => val is File;
/**
 * 是否为纯粹的对象
 * isObject([]) 是 true ，因为 type [] 为 'object'
 * isPlainObject([]) 则是false
 */
declare const isPlainObject: (val: unknown) => val is object;
/**
 * 是否为 null 或 underfined
 * @param v
 * @returns
 */
declare function isUndef(v: unknown): boolean;
/**
 * 是否为空字符串
 */
declare function isEmptyString(v: unknown): boolean;
/**
 * 是否为空
 * @example isEmpty(null) // true
 * @example isEmpty(undefined) // true
 * @example isEmpty('') // true
 * @example isEmpty([]) // true
 * @example isEmpty({}) // true
 * @example isEmpty(' ') // false
 * @example isEmpty(123) // true
 */
declare function isEmpty(val: any): boolean;

/**
 * 执行数组里的函数, 每个函数的返回值作为下一个函数的参数
 * @param fns - 函数数组
 * @param args - 参数
 * @example invokeArrayFns([a => a + 1, b => b + 2], 2) // 5
 */
declare function invokeArrayFns<T = any, P = any>(fns: AnyFn[], args?: P): T;
/**
 * 执行数组里的异步函数, 每个函数的返回值作为下一个函数的参数
 * @param fns - 函数数组
 * @param args - 参数
 * @example invokeArrayAsyncFns([a => Promise.resolve(a + 1), b => Promise.resolve(b + 2)], 2) // 5
 */
declare function invokeArrayAsyncFns<T = any, P = any>(fns: AnyFn[], args?: P): Promise<T>;
/**
 * 字符串哈希
 * @param str - 字符串
 * @example stringHash('foo') // 193420387
 */
declare function stringHash(str: string): number;
/**
 * uuid
 * @example uuid() // 3e2e2d4a-9a46-4a7f-8e71-3ca5b1c0e2e2
 */
declare function uuid(): string;
/**
 * nanoid
 * @param alphabet - 字符串
 * @param defaultSize - 长度
 * @example nanoid() // 3e2e2d4a-9a46-4a7f-8e71-3ca5b1c0e2e2
 */
declare function nanoid(defaultSize?: number, alphabet?: string): string;
/**
 * 手机号码中间4位隐藏星号
 * @param mobile - 手机号
 * @example hideMobile('13800138000') // 138****8000
 */
declare function hideMobile(mobile: string): string;
/**
 * 键值对拼接成URL参数
 * @param obj - 键值对
 * @param encode - 是否编码
 * @example params2Url({ a: 1, b: 2 }) // a=1&b=2
 * @example params2Url({ a: 1, b: 2 }, true) // a%3D1%26b%3D2
 */
declare function params2Url(obj: object, encode?: boolean): string;
/**
 * 将总秒数转换成 时:分:秒
 * @param seconds - 秒
 * @example seconds2Time(3600) // 01:00:00
 */
declare function seconds2Time(seconds: number): string;
/**
 * 将总秒数转换成 日:时:分:秒
 * @param seconds - 秒
 * @example seconds2DayTime(86400) // 01:00:00:00
 */
declare function seconds2DayTime(seconds: number): string;
/**
 * 转柯里化函数
 * @param fn - 函数
 * @example
 * const add = (a, b) => a + b
 * const curriedAdd = curry(add)
 * curriedAdd(1)(2) // 3
 * curriedAdd(1, 2) // 3
 */
declare function toCurryFunc<T = any>(fn: AnyFn): (this: any, ...args: T[]) => any;
/**
 * 防抖
 * @param fn - 函数
 * @param wait - 等待时间
 * @example debounce(() => console.log(1), 1000)()
 */
declare function debounce<T = any>(fn: AnyFn, wait?: number): (this: any, ...args: T[]) => void;
/**
 * 节流
 * @param fn - 函数
 * @param wait - 等待时间
 * @example throttle(() => console.log(1), 1000)()
 */
declare function throttle<T = any>(fn: AnyFn, wait?: number): (this: any, ...args: T[]) => void;
declare enum OSType {
    IOS = 1,
    Android = 2,
    Other = 3
}
/**
 * 获取操作系统类型
 * @example getOSType() // 1: IOS, 2: Android, 3: other
 */
declare function getOSType(): OSType;

interface IImageVerifyOptions {
    /**
     * canvas dom 对象
     */
    dom: HTMLCanvasElement;
    /**
     * canvas宽度
     */
    width: number;
    /**
     * canvas高度
     */
    height: number;
    /**
     * 验证码
     * @default: 随机生成
     */
    code: string;
}
/**
 * 绘制图形验证码
 */
declare function drawImageVerify({ dom, width, height, code }: IImageVerifyOptions): string;

/**
 * rgb转hex
 * @param r - 红色
 * @param g - 绿色
 * @param b - 蓝色
 * @returns
 */
declare function rgbToHex(r: string | number, g: string | number, b: string | number): string;
declare function toHex(n: string | number): string;
/**
 * 十六进制颜色转RGB颜色
 * @param hex 颜色值 #333 或 #333333
 */
declare function hexToRGB(hex: string): {
    r: number;
    g: number;
    b: number;
} | null;

/**
 * 随机十六进制颜色
 * @returns #e34155
 */
declare function randomHexColorCode(): string;
/**
 * 随机 rgb 颜色
 * @param min - 最小值
 * @param max - 最大值
 * @returns
 */
declare function randomRgbColor(min?: number, max?: number): string;
/**
 * 随机布尔值
 * @returns true or false
 */
declare function randomBoolean(): boolean;
/**
 * 生成指定范围的随机整数
 * @param min - 最小值
 * @param max - 最大值
 * @returns (0,5) => 3
 */
declare function randomIntegerInRange(min: number, max: number): number;
/**
 * 生成指定范围的随机小数
 * @param min - 最小值
 * @param max - 最大值
 * @returns (0,5) => 3.0211363285087005
 */
declare function randomNumberInRange(min: number, max: number): number;

/**
 * function 参数校验
 * @example
 * function double(value = required()) {
 *  return value * 2
 * }
 *
 * double(3) // 6
 * double() // throw Error
 */
declare function required(): void;

/**
 * 下载文件
 * @param link - 文件链接
 * @param name - 文件名
 * @example downloadFile('http://www.baidu.com/img/bd_logo1.png', 'logo.png')
 */
declare function download(link: string, name?: string): void;
/**
 * 浏览器下载静态文件
 * @param name - 文件名
 * @param content - 文件内容 非Blob类型会自动转换
 * @example downloadFile('1.json','xxxxxxxxxxxx'))
 * @example downloadFile('1.json',new Blob([ data ]))
 */
declare function downloadFile(name: string, content: any): void;
/**
 * 判断是否是移动端agent字符
 * @param agent - agent string
 * @returns true or false
 */
declare function isMobileAgent(agent: string): boolean;
/**
 * 判断是否是移动端
 * @returns
 */
declare function isMobile(): boolean;
/**
 * 刷新页面
 */
declare function reload(): void;
/**
 * 滚动到页面顶部
 */
declare function goToTop(): void;
/**
 * 跳转到其他页面
 */
declare function goTo(url: string): void;
/**
 * 元素顺滑的滚动到可视区域的起点
 * @param element - 元素
 * @example scrollToTop(document.querySelector('#id'))
 */
declare function scrollToTop(element: Element): void;
/**
 * 元素顺滑的滚动到可视区域的终点
 * @param element - 元素
 * @example scrollToTop(document.querySelector('#id'))
 */
declare function scrollToBottom(element: Element): void;

export { DATE_FORMAT, HTTP_CONTENT_TYPE, HTTP_REQUEST, HTTP_STATUS, OSType, TYPE_OF, addDays, all, allEqual, camelize, capitalize, clone, closest, compareVersion, createArray, debounce, download, downloadFile, drawImageVerify, escapeHTML, escapeRegExp, formatDate, getByPath, getDayByNumber, getDaysOfLastMonth, getDaysOfMonth, getDaysOfWeek, getDaysToNowOfMonth, getFirstDayOfMonth, getFirstDayOfYear, getHanByNumber, getLastDayOfMonth, getNow, getOSType, goTo, goToTop, groupArrayByKey, hasChanged, hasOwn, hexToRGB, hideMobile, hyphenate, indexOfMax, indexOfMin, insertAt, insertStr, intersection, invokeArrayAsyncFns, invokeArrayFns, isAfter, isArray, isBefore, isBetween, isDate, isEmpty, isEmptyString, isFile, isFunction, isMap, isMobile, isMobileAgent, isNull, isNumber, isObject, isPlainObject, isPromise, isRegExp, isSet, isString, isSymbol, isUndef, isUndefined, last, lastN, loadJs, nanoid, normalize, objectToString, omit, omitBy, params2Url, pick, pickBy, randomBoolean, randomHexColorCode, randomIntegerInRange, randomNumberInRange, randomRgbColor, reload, removeAt, removeByProp, removeDuplicates, removeWhitespace, replaceAll, required, rgbToHex, scrollToBottom, scrollToTop, seconds2DayTime, seconds2Time, shuffleArray, sleep, stringHash, subDays, throttle, toCamelCase, toCharArray, toCurryFunc, toDate, toHex, toKebabCase, toNumber, toPascalCase, toSnakeCase, toTypeString, transpose, trim, trimAll, uuid };
